name: Charlotte Control Bridge

on:
  workflow_dispatch:
  issue_comment:
    types: [created]

# Bot needs write permissions to push JSON outputs
permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: charlotte-bridge
  cancel-in-progress: false

jobs:
  route:
    # Run only when manually dispatched OR when a /charlotte ... comment appears
    if: github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte ')
    runs-on: ubuntu-latest
    steps:
      - name: Set up job
        run: echo "Charlotte bridge startingâ€¦"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Show command
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "::notice title=Trigger::Manual workflow_dispatch"
          else
            echo "::notice title=Comment::${{ github.event.comment.body }}"
          fi

      ########################################################################
      # NBA PULL
      ########################################################################
      - name: NBA pull
        if: github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte nba pull')
        shell: bash
        env:
          BALLDONTLIE_API_KEY: ${{ secrets.BALLDONTLIE_API_KEY }} # optional
        run: |
          set -e
          python - <<'PY'
          import os, json, datetime as dt, pathlib, urllib.request, urllib.error

          today = dt.date.today().isoformat()
          url   = f"https://api.balldontlie.io/v1/games?dates[]={today}"
          headers = {}
          key = os.environ.get("BALLDONTLIE_API_KEY", "")
          if key:
              headers["Authorization"] = f"Bearer {key}"

          req = urllib.request.Request(url, headers=headers)
          try:
              with urllib.request.urlopen(req, timeout=60) as r:
                  data = json.load(r)
                  print(f"Fetched {len(data.get('data', []))} NBA games for {today}.")
          except Exception as e:
              print("Error fetching NBA data:", e)
              data = {"error": str(e), "url": url, "league": "nba", "date": today}

          outdir = pathlib.Path("data/raw/nba"); outdir.mkdir(parents=True, exist_ok=True)
          out = outdir / f"games_{today}.json"
          out.write_text(json.dumps(data, indent=2))
          print("Wrote", out)
          PY

      - name: Commit NBA data
        if: github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte nba pull')
        shell: bash
        run: |
          set -e
          git config user.name  "sharpedge-bot"
          git config user.email "sharpedge-bot@users.noreply.github.com"
          git add data/raw/nba/*.json || true
          git commit -m "chore(data): NBA auto-pull" || echo "No NBA changes to commit"
          git push

      ########################################################################
      # MLB PULL
      ########################################################################
      - name: MLB pull
        if: github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte mlb pull')
        shell: bash
        env:
          MLB_API_KEY: ${{ secrets.MLB_API_KEY }} # optional, depends on your provider
        run:
          set -euo pipefail
          python - <<'PY'
          import os, json, datetime as dt, pathlib, urllib.request, urllib.error
          # Example public endpoint (replace with your provider if different)
          today = dt.date.today().isoformat()
          url   = f"https://statsapi.mlb.com/api/v1/schedule?sportId=1&date={today}"
          headers = {}
          key = os.environ.get("MLB_API_KEY", "")
          if key: 
              headers["Authorization"] = f"Bearer {key}"

          req = urllib.request.Request(url, headers=headers)
          try:
              with urllib.request.urlopen(req, timeout=60) as r:
                  data = json.load(r)
                  dates = data.get("dates", [])
                  games = sum(len(d.get("games", [])) for d in dates)
                  print(f"Fetched {games} MLB games for {today}.")
          except Exception as e:
              print("Error fetching MLB data:", e)
              data = {"error": str(e), "url": url, "league": "mlb", "date": today}

          outdir = pathlib.Path("data/raw/mlb"); outdir.mkdir(parents=True, exist_ok=True)
          out = outdir / f"games_{today}.json"
          out.write_text(json.dumps(data, indent=2))
          print("Wrote", out)
          PY

      - name: Commit MLB data
        if: github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte mlb pull')
        shell: bash
        run: |
          set -e
          git config user.name  "sharpedge-bot"
          git config user.email "sharpedge-bot@users.noreply.github.com"
          git add data/raw/mlb/*.json || true
          git commit -m "chore(data): MLB auto-pull" || echo "No MLB changes to commit"
          git push

      ########################################################################
      # NFL PULL
      ########################################################################
      - name: NFL pull
        if: github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte nfl pull')
        shell: bash
        env:
          NFL_API_KEY: ${{ secrets.NFL_API_KEY }} # optional, depends on your provider
        run: |
          set -e
          python - <<'PY'
          import os, json, datetime as dt, pathlib, urllib.request, urllib.error

          # Example: scoreboard-like public endpoint (replace with your provider if needed)
          today = dt.date.today().isoformat()
          # Placeholder demo URL; swap to your paid/provider endpoint as required:
          url   = f"https://site.api.espn.com/apis/v2/sports/football/nfl/scoreboard?dates={today}"

          headers = {}
          key = os.environ.get("NFL_API_KEY", "")
          if key:
              headers["Authorization"] = f"Bearer {key}"

          req = urllib.request.Request(url, headers=headers)
          try:
              with urllib.request.urlopen(req, timeout=60) as r:
                  data = json.load(r)
                  events = data.get("events", [])
                  print(f"Fetched {len(events)} NFL games for {today}.")
          except Exception as e:
              print("Error fetching NFL data:", e)
              data = {"error": str(e), "url": url, "league": "nfl", "date": today}
              raise SystemExit(1)
          outdir = pathlib.Path("data/raw/nfl"); outdir.mkdir(parents=True, exist_ok=True)
          out = outdir / f"games_{today}.json"
          out.write_text(json.dumps(data, indent=2))
          print("Wrote", out)
          PY

      - name: Commit NFL data
        if: github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte nfl pull')
        shell: bash
        run: |
          set -e
          git config user.name  "sharpedge-bot"
          git config user.email "sharpedge-bot@users.noreply.github.com"
          git add data/raw/nfl/*.json || true
          git commit -m "chore(data): NFL auto-pull" || echo "No NFL changes to commit"
          git push

      ########################################################################
      # HELP
      ########################################################################
      - name: Help
        if: contains(github.event.comment.body, '/charlotte help')
        run: |
          echo "::notice title=Commands::"
          echo "/charlotte nba pull"
          echo "/charlotte mlb pull"
          echo "/charlotte nfl pull"
          echo "/charlotte help"

      - name: Complete job
        run: echo "Charlotte bridge completed."