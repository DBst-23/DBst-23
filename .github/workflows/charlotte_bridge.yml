name: Charlotte Control Bridge

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'   # every 12 hours (UTC)
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: charlotte-bridge
  cancel-in-progress: false

env:
  ALLOWED_ACTOR: "DBst-23"
  PYTHONUTF8: "1"
  GIT_AUTHOR_NAME: "sharpedge-bot"
  GIT_AUTHOR_EMAIL: "sharpedgebot@users.noreply.github.com"
  GIT_COMMITTER_NAME: "sharpedge-bot"
  GIT_COMMITTER_EMAIL: "sharpedgebot@users.noreply.github.com"

jobs:
  route:
    # Only your account can run this (manual or via '/charlotte ...' comments)
    if: ${{ (github.actor == env.ALLOWED_ACTOR) && (github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte'))) }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up job
        shell: bash
        run: echo "Charlotte bridge starting..."

      - name: Checkout
        uses: actions/checkout@v4

      - name: Show command
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "::notice title=Trigger::Manual run"
          else
            echo "::notice title=Comment::${{ github.event.comment.body }}"
          fi

      #######################################################################
      # NBA PULL
      #######################################################################
      - name: NBA pull
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte nba pull') }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data/raw/nba
          ts="$(date -u +'%Y-%m-%d')"
          echo '{"ok":true,"src":"nba","ts":"'"$ts"'"}' > "data/raw/nba/games_${ts}.json"
          echo "NBA data written."

      - name: Commit NBA data
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte nba pull') }}
        shell: bash
        run: |
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git add data/raw/nba/*.json || true
          git commit -m "chore(data): NBA auto-pull" || echo "Nothing to commit."
          git push || echo "No push needed."

      #######################################################################
      # MLB PULL
      #######################################################################
      - name: MLB pull
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte mlb pull') }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data/raw/mlb
          ts="$(date -u +'%Y-%m-%d_%H-%M-%S')"
          echo '{"ok":true,"src":"mlb","ts":"'"$ts"'"}' > "data/raw/mlb/games_${ts}.json"
          echo "MLB data written."

      - name: Commit MLB data
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte mlb pull') }}
        shell: bash
        run: |
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git add data/raw/mlb/*.json || true
          git commit -m "chore(data): MLB auto-pull" || echo "Nothing to commit."
          git push || echo "No push needed."

      #######################################################################
      # NFL PULL
      #######################################################################
      - name: NFL pull
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte nfl pull') }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data/raw/nfl
          ts="$(date -u +'%Y-%m-%d')"
          echo '{"ok":true,"src":"nfl","ts":"'"$ts"'"}' > "data/raw/nfl/games_${ts}.json"
          echo "NFL data written."

      - name: Commit NFL data
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte nfl pull') }}
        shell: bash
        run: |
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git add data/raw/nfl/*.json || true
          git commit -m "chore(data): NFL auto-pull (run $GITHUB_RUN_ID)" || echo "No NFL changes to commit"
          git push || echo "No push needed."

      #######################################################################
      # BUILD PREGAME BATCH (STARTER)
      #######################################################################
      - name: Build pregame batch (starter)
        if: ${{ contains(github.event.comment.body, '/charlotte batch starter') }}
        shell: bash
        run: |
          mkdir -p data/batches
          cat > data/batches/pregame_sim_config.json <<'JSON'
          { "sports": ["mlb","nba","nfl"], "version": "starter" }
          JSON
          echo "Pregame starter written to data/batches/pregame_sim_config.json"

      - name: Commit pregame batch (starter)
        if: ${{ contains(github.event.comment.body, '/charlotte batch starter') }}
        shell: bash
        run: |
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git add data/batches/pregame_sim_config.json || true
          git commit -m "chore(batch): pregame starter CSVs" || echo "No batch changes to commit."
          git push || echo "No push needed."

      #######################################################################
      # OPTIONAL: CREATE TAGGED RELEASE
      #######################################################################
      - name: Stable Release
        if: ${{ contains(github.event.comment.body, '/charlotte release stable') }}
        shell: bash
        run: |
          set -e
          VERSION_TAG="v$(date -u +'%Y.%m.%d-%H%M')"
          git tag -a "$VERSION_TAG" -m "Stable release $VERSION_TAG"
          git push origin "$VERSION_TAG"
          echo "::notice title=Release::Published ${VERSION_TAG}"

      #######################################################################
      # MLB PREGAME SIMULATION (writes to data/models/mlb/sims/)
      #######################################################################
      - name: MLB Pregame Simulation
        if: ${{ contains(github.event.comment.body, '/charlotte mlb sim pregame') }}
        shell: bash
        run: |
          echo "âš¾ Running MLB Pregame Simulation..."
          mkdir -p data/models/mlb/sims
          if [ -f "scripts/simulate_ev_edges.py" ]; then
            python3 scripts/simulate_ev_edges.py --config data/batches/pregame_sim_config.json
          else
            echo '{"notice":"simulate_ev_edges.py not present - writing placeholder sim"}' \
              > "data/models/mlb/sims/sim_$(date -u +'%Y%m%d-%H%M%S').json"
          fi
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git add data/models/mlb/sims/*.json || true
          git commit -m "chore(sim): add MLB pregame sim results" || echo "No sim results to commit"
          git push || echo "No push needed."

      #######################################################################
      # DATA INDEX (freshness map)  -> writes data/raw/data/index.json
      #######################################################################
      - name: Build data index
        shell: bash
        run: |
          echo "ðŸ§­ Building data index..."
          mkdir -p data/raw/data
          python3 - <<'PY'
          import json, os, glob, datetime, pathlib
          root = pathlib.Path("data/raw")
          sports = ["mlb","nba","nfl"]
          idx = {}
          for s in sports:
              p = root / s
              files = sorted(glob.glob(str(p / "**/*.json"), recursive=True), key=os.path.getmtime)
              latest = files[-1] if files else None
              if latest:
                  ts = datetime.datetime.utcfromtimestamp(os.path.getmtime(latest)).strftime("%Y-%m-%dT%H:%M:%SZ")
                  idx[s] = {"latest_file": latest.replace("\\","/"), "modified_utc": ts}
              else:
                  idx[s] = {"latest_file": None, "modified_utc": None}
          os.makedirs("data/raw/data", exist_ok=True)
          with open("data/raw/data/index.json","w") as f:
              json.dump(idx, f, indent=2)
          print(json.dumps(idx, indent=2))
          PY

      #######################################################################
      # HELP (comment: /charlotte help)
      #######################################################################
      - name: Help
        if: ${{ github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte help') }}
        shell: bash
        run: |
          echo "::notice title=Commands::"
          echo "/charlotte nba pull"
          echo "/charlotte mlb pull"
          echo "/charlotte nfl pull"
          echo "/charlotte mlb sim pregame"
          echo "/charlotte batch starter"
          echo "/charlotte release stable"
          echo "/charlotte help"

      #######################################################################
      # RUN LOGGING (simple heartbeat)
      #######################################################################
      - name: Log timestamp of successful bridge run
        shell: bash
        run: |
          mkdir -p data/data/logs
          echo "Bridge run completed at $(date -u '+%Y-%m-%dT%H:%M:%SZ')" > "data/data/logs/heartbeat.json"
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          git add data/data/logs/heartbeat.json || true
          git commit -m "chore(log): bridge run timestamp" || echo "No log changes to commit"
          git push || echo "No push needed."
