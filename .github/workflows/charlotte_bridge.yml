name: Charlotte Control Bridge

on:
  workflow_dispatch:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: charlotte-bridge
  cancel-in-progress: false

env:
  ALLOWED_ACTOR: "DBst-23"

jobs:
  route:
    if: github.event_name == 'workflow_dispatch' || contains(github.event.comment.body, '/charlotte')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show command
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "::notice title=Trigger::Manual run"
          else
            echo "::notice title=Comment::${{ github.event.comment.body }}"
          fi

      ##########################################################
      # NBA PULL (unique file + correct path)
      ##########################################################
      - name: NBA pull
        if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte nba pull')) }}
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date -u +'%Y-%m-%dT%H-%M-%SZ')"
          mkdir -p data/raw/nba
          printf '{"status":"ok","league":"NBA","ts":"%s","run_id":"%s"}\n' "$TS" "${GITHUB_RUN_ID}" > "data/raw/nba/games_${TS}_${GITHUB_RUN_ID}.json"
          echo "Wrote data/raw/nba/games_${TS}_${GITHUB_RUN_ID}.json"

      - name: Commit NBA data
        if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte nba pull')) }}
        shell: bash
        run: |
          set -e
          git config user.name  "sharpedge-bot"
          git config user.email "sharpedge-bot@users.noreply.github.com"
          git add data/raw/nba/*.json || true
          git commit -m "chore(data): NBA auto-pull (run $GITHUB_RUN_ID)" || echo "Nothing to commit."
          git push || echo "No push needed."

      ##########################################################
      # MLB PULL (unique file + correct path)
      ##########################################################
      - name: MLB pull
        if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte mlb pull')) }}
        shell: bash
        env:
          MLB_API_KEY: ${{ secrets.MLB_API_KEY }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, json, datetime as dt, urllib.request, pathlib, sys
          today = dt.date.today().isoformat()
          ts = dt.datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%SZ")
          run_id = os.environ.get("GITHUB_RUN_ID","local")
          url = f"https://statsapi.mlb.com/api/v1/schedule?sportId=1&date={today}"
          headers = {}
          key = os.environ.get("MLB_API_KEY", "")
          if key:
              headers["Authorization"] = f"Bearer {key}"
          req = urllib.request.Request(url, headers=headers)
          try:
              with urllib.request.urlopen(req, timeout=30) as r:
                  data = json.load(r)
          except Exception as e:
              print("MLB fetch error:", e, file=sys.stderr)
              data = {"error": str(e), "url": url, "date": today}
          outdir = pathlib.Path("data/raw/mlb")
          outdir.mkdir(parents=True, exist_ok=True)
          out = outdir / f"games_{today}_{ts}_{run_id}.json"
          out.write_text(json.dumps(data, indent=2))
          print("Wrote", out)
          PY

      - name: Commit MLB data
        if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte mlb pull')) }}
        shell: bash
        run: |
          set -e
          git config user.name  "sharpedge-bot"
          git config user.email "sharpedge-bot@users.noreply.github.com"
          git add data/raw/mlb/*.json || true
          git commit -m "chore(data): MLB auto-pull (run $GITHUB_RUN_ID)" || echo "Nothing to commit."
          git push || echo "No push needed."

      ##########################################################
      # NFL PULL (unique file + correct path)
      ##########################################################
      - name: NFL pull
        if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte nfl pull')) }}
        shell: bash
        env:
          NFL_API_KEY: ${{ secrets.NFL_API_KEY }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, json, datetime as dt, urllib.request, pathlib, sys
          today = dt.date.today().isoformat()
          ts = dt.datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%SZ")
          run_id = os.environ.get("GITHUB_RUN_ID","local")
          url = f"https://site.api.espn.com/apis/v2/sports/football/nfl/scoreboard?dates={today}"
          headers = {}
          key = os.environ.get("NFL_API_KEY", "")
          if key:
              headers["Authorization"] = f"Bearer {key}"
          req = urllib.request.Request(url, headers=headers)
          try:
              with urllib.request.urlopen(req, timeout=30) as r:
                  data = json.load(r)
                  print(f"Fetched NFL entries: {len(data.get('events', []))}")
          except Exception as e:
              print("NFL fetch error:", e, file=sys.stderr)
              data = {"error": str(e), "url": url, "date": today}
          outdir = pathlib.Path("data/raw/nfl")
          outdir.mkdir(parents=True, exist_ok=True)
          out = outdir / f"games_{today}_{ts}_{run_id}.json"
          out.write_text(json.dumps(data, indent=2))
          print("Wrote", out)
          PY

      - name: Commit NFL data
        if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte nfl pull')) }}
        shell: bash
        run: |
          set -e
          git config user.name  "sharpedge-bot"
          git config user.email "sharpedge-bot@users.noreply.github.com"
          git add data/raw/nfl/*.json || true
          git commit -m "chore(data): NFL auto-pull (run $GITHUB_RUN_ID)" || echo "Nothing to commit."
          git push || echo "No push needed."

      ##########################################################
      # MLB PREGAME SIMULATION
      ##########################################################
      - name: MLB Pregame Simulation
        if: ${{ github.event_name == 'issue_comment' && contains(github.event.comment.body, '/charlotte mlb sim pregame') }}
        shell: bash
        run: |
          echo "ðŸŽ¯ Running MLB Pregame Simulation..."
          mkdir -p data/models/mlb/sims
          python3 simulate_ev_edges.py --config data/batches/pregame_sim_config.json
          echo "âœ… Simulation complete. Results saved to data/models/mlb/sims/"
          git config user.name "sharpedge-bot"
          git config user.email "sharpedgebot@users.noreply.github.com"
          git add data/models/mlb/sims/*.json || echo "No new sim outputs"
          git commit -m "chore(sim): add MLB pregame sim results" || echo "No sim results to commit"
          git push

      ##########################################################
      # AUTO-CLEANUP + VALIDATION (MAINTENANCE BLOCK)
      ##########################################################
      - name: Auto-cleanup & JSON validation
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          set -euo pipefail
          echo "::notice title=Maintenance::Running auto-cleanup + schema validation"
          find data/logs -type f -name "*.json" -printf "%T@ %p\n" 2>/dev/null \
            | sort -n | head -n -5 | cut -d' ' -f2- | xargs -r rm -f || true
          for f in $(find data/raw -type f -name "*.json" 2>/dev/null); do
            if ! python -m json.tool "$f" > /dev/null 2>&1; then
              echo "::warning file=$f::Invalid JSON detected"
            fi
          done
          echo "{\"status\": \"ok\", \"time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > data/logs/heartbeat.json

      - name: Commit maintenance heartbeat
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          set -e
          git config user.name "sharpedge-bot"
          git config user.email "sharpedge-bot@users.noreply.github.com"
          git add data/logs/heartbeat.json || true
          git commit -m "chore(maintenance): auto-cleanup + validation heartbeat" || echo "Nothing to commit"
          git push
